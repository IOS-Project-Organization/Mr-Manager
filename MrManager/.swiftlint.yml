excluded: # 린트 과정에서 무시할 파일 경로. `included`보다 우선순위 높음

- Pods

- MrManager/Application/AppDelegate.swift

- MrManager/Application/SceneDelegate.swift

disabled_rules: # 기본 룰 중에서 비활성화 할 룰들을 지정

- block_based_kvo

- compiler_protocol_init

- force_try

- large_tuple

opt_in_rules: # 기본 룰이 아닌 룰들을 활성화

- anyobject_protocol
- attributes
- closure_end_indentation
- closure_spacing
- enum_case_associated_values_count
- explicit_acl
- explicit_self
- explicit_type_interface
- file_name_no_space
- file_types_order # 코드 정렬 봐야함
- indentation_width
- multiline_function_chains
- operator_usage_whitespace
- optional_enum_case_matching
- override_in_extension
- prefer_self_in_static_references
- private_action
- private_outlet
- redundant_type_annotation
#- sorted_imports
- unowned_variable_capture
- untyped_error_in_catch
- vertical_whitespace_closing_braces
- vertical_whitespace_opening_braces
- weak_delegate

included: # 린트 과정에 포함할 파일 경로. 이 항목이 존재하면 `--path`는 무시됨

#---------------------------

# 기본 룰

# block_based_kvo : KVO 관련 룰

# class_delegate_protocol : 델리게이트 프로토콜은 클래스 전용이어야 함.

# Closing_brace : 소괄호 안에 중괄호가 있을 경우 소괄호와 중괄호간에 공백 없어야 함.

# closure_parameter_position : 클로저의 매개변수는 여는 중괄호와 같은 줄에 있어야 함.

# colon : 콜론은 변수명과 붙어있어야 하고 타입은 콜론과 한칸 띄워져 있어야 함.

# comma : 쉼표 앞에 공백이 있어선 안되고, 쉼표 뒤에 공백이 있으려면 뒤에 값이 있어야 함.

# comma_inheritance : 쉼표를 사용하여 상속을 구분

# comment_spacing : //으로 주석 이후 공백 한 칸을 가져야 함.

# compiler_protocol_init : let set: Set<Int> = [1, 2] o, let set = Set(arrayLiteral: 1, 2) x

# computed_accessors_order : get, set 순으로 작성해야 함.

# control_statement : 조건문이나 인수를 불필요하게 괄호를 쓰지 않음.

# cyclomatic_complexity : 코드가 이유없이 복잡하면 경고창

# deployment_target : 배포 버전보다 더 아래버전을 작성하면 안됨. 만약 내가 ios12로 배포했는데 11.0을 작성하면 오류 발생

# disabled_direct_init : 위험할 수 있는 초기화를 할 경우 경고(Bundle, UIDevice)

# duplicate_enum_cases : 열겨형은 이름이 같은 경우를 여러 개 포함 x

# duplicate_imports : import 중복되면 안됨

# duplicated_key_in_dictionary_literal : 딕셔너리에서 중복된 키 값은 런타임 충돌

# dynamic_inline : inline어노테이션이랑 dynamic을 같이 쓰면 안됨

# empty_enum_arguments : 열겨형이 아닐 때, case문에서 case .bar(_)이런거 불가능

# empty_parameters : 매개변수 비어있을 때 (Void)말고 ()을 써야 함

# empty_parentheses_with_trailing_closure : 후행 클로저를 사용할 때 .map(){ $0 } 이런식으로 빈 소괄호 x

# file_length : 파일 하나에 line이 400이 넘어가면 경고, 1000넘으면 오류

# for_where : for문에서 옵셔널 바인딩 아니고 단일 if문을 내부에 쓰면x where절을 써야 함.

# force_cast : as! x, as? o

# force_try : try! x, try? o

# function_body_length : 함수의 body가 40줄 이상 경고, 100줄 이상 오류

# function_parameter_count : 함수 매개변수 5개 이상 경고, 8개 이상 오류

# generic_type_name : 타입 이름은 대문자로 시작해야하고, 영어와 숫자만 가능, 길이는 1~20

# identifier_name : 식별자 이름은 영숫자만 가능하고, 소문자로 시작하거나 대문자만 포함해야하며, 길이는 3 ~ 40

# implicit_getter : Computed read-only property에서 get만 할 때 get키워드 굳이 쓰지말고 return하셈.

# inclusive_language : 인종, 성별, 계급으로 차별적인 단어 사용 금지.

# inert_defer : defer가 scope끝에 있으면 defer가 의미가 없으니 피하셈

# is_disjoint : Set의 비어있음을 확인할 때 Set.isDisjoint(with:)을 사용하고, Set.intersection(_:).isEmpty는 사용 ㄴㄴ

# large_tuple : 튜플의 멤버가 많으면 오류 또는 경고 (쓸거면 사용자 정의하기)

# leading_whitespace : 파일에 선행 공백 안된다.

# legacy_cggeometry_functions : 예를 들어서 CGGeometry에서 CGRectGetWidth(rect)함수보다 rect.width 선호해야 함. 아닐 경우 경고

# legacy_constant : 구조체 본체에 있는 상수는 레거시 상수보다 선호해야 함. 아닐 경우 경고. 예를 들자면, CGRectInfinite함수보다는 CGRect.infinite를 써라.

# legacy_constructor : 예를 들어서, CGPointMake(10, 10)보다는 CGPoint(x: 10, y: 10)를 써라. 아닐 경우 경고

# legacy_hashing : hashValue를 재정의하기보단 hash(into:)를 써라.

# legacy_nsgeometry_functions : 예를 들어서 NSGeometry에서 NSWidth(rect)함수보다 rect.width 선호해야 함. 아닐 경우 경고

# legacy_random : arc4random(10)함수 보다는 Int.random(in: 0..<10)를 선호함.

# line_length : 한 줄에 글자가 120이상 경고, 200 오류이며, URL, 함수 선언, 주석, 문자열보간은 무시.

# mark : MARK 주석은 유효한 양식으로 되어있어야 함.

# multiple_closures_with_trailing_closure : 2개 이상의 클로저 매개변수가 있다면 후행클로저 ㄴㄴ

# nesting : 똑같은 유형의 중첩은 최대 2개까지만, 함수는 3개까지 가능. ex) class내부에 class까지만, func내에 func내에 func까지만 가능

# no_fallthrough_only : case의 실행문에서 fallthrough이외에 다른 실행문이 있어야 함.

# no_space_in_method_call : 메소드호출 시 메소드 이름과 괄호 사이에 공백 ㄴㄴ

# notification_center_detachment : 객체는 deinit을 통해 notificationCenter제거해야함.

# nsobject_prefer_isequal : NSObject 서브클래스는 == 대신 isEqual을 구현해야 합니다.

# opening_brace : 여는 중괄호앞에 공백 하나가 있어야하고 선언과 같은 줄에 있어야 함.

# operator_whitespace : 연산함수 정의시 단일 공백으로 둘러싸여야 함.

# orphaned_doc_comment : 문서에는 주석을 첨부해야 함.

# private_over_fileprivate : fileprivate 보다 private 선호.

# private_unit_test : private로 선언된 Unit Test는 안함.

# protocol_property_accessors_order : 프로토콜에서 속성 선언 시 접근자 순서 get set순으로.

# reduce_boolean : nums.reduce(0) { $0.0 + $0.1 } o , let allNines = nums.↓reduce(true) { $0.0 && $0.1 == 9 } x resuce할 때 부울 많이 쓰기 ㄴㄴ

# redundant_discardable_let : 함수의 결과를 버릴거면 _ = foo() 처럼을 선호. 앞에 let같은거 붙이기 ㄴㄴ

# redundant_objc_attribute : Objective-C 속성(@objc) 중복되지 않게. ex)@objc @IBInspectable private var foo: String? {} 이런거 싫어함.

# redundant_optional_initialization : 옵셔널 변수에 nil로 초기화 하지마라.

# redundant_set_access_control : private(set) private var foo: Int 이런식이나,open class Foo { open(set) open var bar: Int } 이런식으로 접근제어자 수준이 동일하면 명시안해도 된다.

# redundant_string_enum_value : 열거형 case 이름이랑 값이 문자열로 같으면 안된다.

# redundant_void_return : 함수에서 옵셔널(?,!)을 리턴하는 거 아니면 굳이 -> ()이나 -> Void 이런거 적지마셈.

# return_arrow_whitespace : 리턴 타입은 단일 공백이나 다른 줄로 구분 해야함.

# self_in_property_initialization : self는 적용되지 않은 NSObject.self() 메서드를 참조해서 위험하니까 lazy var로 만들거나 ClassName.self로 현재 인스턴스 참조하셈.

#self_in_property_initialization ex)

#class View: UIView {

#    ↓let button: UIButton = {

#        let button = UIButton()

#        button.addTarget(self, action: #selector(didTapButton), for: .touchUpInside)

#        return button

#    }()

#}

# shorthand_operator : a = a+1 말고, a += 1 써라

# statement_position : else, else if, catch 앞 뒤로 공백과 닫는 괄호 여는 괄호 있어야 함.

# switch_case_alignment : switch문에서 case와 수직으로 있어야 함.

# syntactic_sugar : let x: [Int] ㅇㅇ, let x: Array<Int> ㄴㄴ

# todo : TODO, FIXME 주석처리한거는 해야 함.

# trailing_comma : 배열이나 딕셔너리의 끝에 쉼표 ㄴ

# trailing_newline : 파일 마지막엔 빈line이 하나 있어야 함.

# trailing_semicolon : 세미콜론 필요없으면 쓰지마셈

# trailing_whitespace : 행 끝에 굳이 공백 ㄴㄴ

# type_body_length : class같은 녀석들 본문에 200줄 이상 경고, 350줄이상 오류

# type_name : class같은 녀석들 영숫자만 포함, 대문자로 시작, 길이 3 ~ 40자여야함.

# available_condition : 본문 비어있으면 available 말고 unavailable쓰셈.

# unneeded_break_in_switch : 굳이 필요 없을 때 break 쓰지마셈

# used_capture_list : 캡쳐해서 안쓰는 거는 제거해라.

# used_closure_parameter : 클로저에서 안쓰는 거는 _로 대체해라.

# used_control_flow_label : 안쓰는 control flow label 제거 (뭐지이거?)

# used_enumerated : 반복문에서 .enumerated()할 때 인덱스 안쓸애들은 제거

# used_optional_binding :  let _ = 보다 != nil를 선호 함.

# used_setter_value : Setter 값을 안쓰면 오류

# valid_ibinspectable : @IBInspectable는 변수에만, 타입 명시, 값 명시 해야함.

# vertical_parameter_alignment : 함수 선언시 매개변수가 여러 줄로 있을 경우 세로로 정렬.

# vertical_whitespace : 세로 공백을 한 줄로 제한.

# void_return : -> ()보다 -> Void 선호

# xctfail_message : XCTFail()에 메세지 포함 해야함.





# 기본룰이 아닌 활성화 해야하는 룰

# anyobject_protocol : 클래스 전용 프로토콜 선언시 class를 상속받기보단 AnyObject ㄱㄱ

# attributes : attributes 쓸 때 올바른 행에 놓게 해줌

# balanced_xctest_lifecycle : setUp, tearDown메서드가 둘 다 있어야 함

# closure_body_length : 클로저 body는 20줄이상 경고, 100줄이상 오류

# closure_end_indentation : 클로저 들여쓰기 잘하게 해줌

# closure_spacing : 클로저의 중괄호 안에 표현식은 양 옆에 공백이 하나씩 있어야함.

# collection_alignment : 컬렉션 타입의 요소들은 수직 정렬해야 함.

# conditional_returns_on_newline : 조건문 다음 줄에 반드시 return 해야 함.

# discouraged_assert : assert(false) 쓰지마셈

# disabled_none_name : none랑 충돌할 수도 있으니 이름으로 쓰지마셈.

# disabled_object_literal : 객체 리터럴보다 이니셜라이저를 선호

# disabled_optional_boolean : 옵셔널 부울 값 못쓰게 하기

# discouraged_optional_collection : 옵셔널 컬렉션타입 ㄴㄴ

# enum_case_associated_values_count : 열거형 케이스의 타입이 5개 경고, 6개 이상 오류

# expiring_todo : TODO 및 FIXME는 만료일 이전에 해결해야 합니다. // **TODO: [10/14/2019]**

# explicit_acl : 접근제한자를 반드시 명시해야 함.

# explicit_enum_raw_value : 열거형의 case raw value는 타입 명시해야 함.

# explicit_init : .init() 호출 금지

# explicit_self : 인스턴스 변수와 함수는 self.로 접근해야 함.

# explicit_type_interface : 변수,상수 선언 시에 반드시 타입 적어야 함.

# extension_access_modifier : extension에 접근제한자 지정해야함.

# fatal_error_message : fatalError()에서 메세지 반드시 포함.

# file_name_no_space : 파일 이름에 공백 ㄴ

# file_types_order : 파일내에 유형 정렬 https://realm.github.io/SwiftLint/file_types_order.html

# function_default_parameter_at_end : 함수에서 기본 값이 지정되있는 매개변수는 끝에 있어야 함.

# indentation_width : 들여쓰기는 공백4또는 탭그리고 들여쓰기가 잘되어있어야 함.

# let_var_whitespace : let,var는 다른 문과 구분해야 함.

# literal_expression_end_indentation : 배열, 딕셔너리는 들여쓰기가 이뻐야 함.

# lower_acl_than_parent: (상위 접근제어 => 하위 접근제어)을 갖는다

# multiline_function_chains : function_chains 할 때 한줄에 하나씩 있거나 같은 줄에 있어야 함.

# multiline_parameters : 함수 및 메서드의 매개변수는 한줄에 하나씩 있거나 같은 줄에 있어야 함.

# no_extension_access_modifier : extension은 접근제어자 안쓰기

# operator_usage_whitespace : 연산자 양 옆에 공백

# optional_enum_case_matching : 열거형 case가 옵셔널이면 안된다.

# overridden_super_call : 재정의된 메서드는 super로 호출

# override_in_extension : extension에서 재정의 ㄴㄴ

# prefer_self_in_static_references : Static references는 class이름 말고 Self키워드를 통해 ㄱㄱ

# private_action : IBAction은 private어야 함.

# private_outlet : IBOutlet도 private어야 함.

# prevented_interface_builder : Interface Builder를 통해 view 만들기 ㄴ

# redundant_type_annotation : 값 선언시 이름이랑 타입, 값에 중복된 이름 ㄴㄴ

# required_deinit : calss에는 반드시 deinit이 있어야 함.

# return_value_from_void_function : Void 함수에서 값 반환 ㄴ

# sorted_imports : import는 이름순으로 정렬해야 함.

# strict_fileprivate : fileprivate 쓰지마라.

# strong_ioutlet : @IBOutlet이 weak로 선언되면 ㄴㄴ

# trailing_closure : 가능하면 그냥클로저 ㄴ 후행클로저로 ㅇㅋㅋ

# type_contents_order : 파일내 순서 규칙 정하기 https://realm.github.io/SwiftLint/type_contents_order.html

# unneeded_parentheses_in_closure_argument : 클로저에서 불필요한 괄호 ㄴ

# unowned_variable_capture : unowned self보다 weak self 선호

# untyped_error_in_catch : catch문은 타입캐스팅 없이 변수 ㄴㄴ

# used_import : import 한거 써야함.

# vertical_whitespace_closing_braces : 중괄호 닫기 전까진 세로공백 ㄴ

# vertical_whitespace_opening_braces : 여는 중괄호 아래에 공백 ㄴ

# weak_delegate : delegate는 레퍼런스사이클을 피하기위해 weak로 선언

# yoda_condition : 비교연산자에서 변수는 왼쪽에 상수는 오른쪽에
